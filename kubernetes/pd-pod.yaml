apiVersion: v1
kind: Pod
metadata:
  name: pd-{{cell}}-{{id}}
  labels:
    component: pd
    cell: {{cell}}
    app: tidb
spec:
  volumes:
  - name: tidb-data
    {{tidbdata_volume}}
  # default is 30s
  terminationGracePeriodSeconds: 5
  restartPolicy: Always
  # DNS A record: [m.Name].[clusterName].Namespace.svc.cluster.local.
  # For example, pd-test-001 in default namesapce will have DNS name
  # `pd-test-001.test.default.svc.cluster.local`.
  hostname: pd-{{cell}}-{{id}}
  subdomain: pd-{{cell}}-srv
  containers:
    - name: pd
      image: 10.209.224.13:10500/ffan/rds/pd:{{version}}
      # imagePullPolicy: IfNotPresent
      volumeMounts:
      - name: tidb-data
        mountPath: /var/pd
      resources:
        limits:
          memory: "{{mem}}Mi"
          cpu: "{{cpu}}m"
      env: 
      - name: M_INTERVAL
        value: "15"
      command:
        - bash
        - "-c"
        - |
          client_urls="http://0.0.0.0:2379"
          # FQDN
          advertise_client_urls="http://pd-{{cell}}-{{id}}.pd-{{cell}}-srv.{{namespace}}.svc.cluster.local:2379"
          peer_urls="http://0.0.0.0:2380"
          advertise_peer_urls="http://pd-{{cell}}-{{id}}.pd-{{cell}}-srv.{{namespace}}.svc.cluster.local:2380"

          export PD_NAME=$HOSTNAME
          export PD_DATA_DIR=/var/pd/$HOSTNAME/data

          export CLIENT_URLS=$client_urls
          export ADVERTISE_CLIENT_URLS=$advertise_client_urls
          export PEER_URLS=$peer_urls
          export ADVERTISE_PEER_URLS=$advertise_peer_urls

          # set prometheus
          sed -i -e 's/{m-job}/{{cell}}/' /etc/pd/config.toml

          if [ -d $PD_DATA_DIR ]; then
            echo "Resuming with existing data dir:$PD_DATA_DIR"
          else
            echo "First run for this member"
            # First wait for the desired number of replicas to show up.
            echo "Waiting for {{replicas}} replicas in SRV record for {{cell}}..."
            until [ $(getpods {{cell}} | wc -l) -eq {{replicas}} ]; do
              echo "[$(date)] waiting for {{replicas}} entries in SRV record for {{cell}}"
              sleep 1
            done
          fi

          urls=""
          for id in {1..{{replicas}}}; do
            id=$(printf "%03d\n" $id)
            urls+="pd-{{cell}}-${id}=http://pd-{{cell}}-${id}.pd-{{cell}}-srv.{{namespace}}.svc.cluster.local:2380,"
          done
          urls=${urls%,}
          echo "Initial-cluster:$urls"

          pd-server \
          --name="$PD_NAME" \
          --data-dir="$PD_DATA_DIR" \
          --client-urls="$CLIENT_URLS" \
          --advertise-client-urls="$ADVERTISE_CLIENT_URLS" \
          --peer-urls="$PEER_URLS" \
          --advertise-peer-urls="$ADVERTISE_PEER_URLS" \
          --initial-cluster=$urls \
          --config="/etc/pd/config.toml"
      lifecycle:
        preStop:
          exec:
            command:
              - bash
              - "-c"
              - |
                # delete prometheus metrics
                curl -X DELETE http://prom-gateway:9091/metrics/job/{{cell}}/instance/$HOSTNAME

                # clear
                resp=''
                for i in $(seq 1 3)  
                do  
                  resp=$(curl -X DELETE --write-out %{http_code} --silent --output /dev/null http://pd-{{cell}}:2379/pd/api/v1/members/$PD_NAME)
                  if [ $resp == 200 ]
                  then
                    break
                  fi 
                  sleep 1  
                done
                if [ $resp == 200 ]
                then
                  echo 'Delete pd "$PD_NAME" success'
                fi